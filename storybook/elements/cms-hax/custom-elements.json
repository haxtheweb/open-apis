{
  "version": 1,
  "tags": [
    {
      "name": "cms-hax",
      "description": "`cms-hax`\n\nEvents:\n\n  * `hax-body-content-changed` {`CustomEvent<any>`} - \n\n  * `simple-toast-show` {`CustomEvent<{ text: string; duration: number; }>`} - \n\n  * `cms-hax-saved` {`CustomEvent<boolean>`} - \n\nAttributes:\n\n  * `offset-margin` {`string`} - \n\n  * `allowed-tags` {`any[]`} - allowed Tags, usually as dictated by the input filtering\nlayer of the backend system that HAX is riding on.\nWhile not fullproof, this at least will enforce front-end\nfiltering to match what actually is going to be allowed\nto be saved in the first place.\n\n  * `app-store-connection` {`string`} - Connection object for talking to an app store.\n\n  * `__appStore` {`string`} - \n\n  * `redirect-location` {`string`} - Optional URL to redirect to once we save.\n\n  * `redirect-on-save` {`boolean`} - Option to redirect once we save successfully\n\n  * `ready` {`boolean`} - \n\n  * `end-point` {`string`} - Location to save content to.\n\n  * `open-default` {`boolean`} - Default the panel to open\n\n  * `hide-panel-ops` {`boolean`} - Hide the panel operations (save and cancel),\n\n  * `element-align` {`string`} - Direction to elementAlign the hax edit panel\n\n  * `method` {`string`} - Method to save content.\n\n  * `sync-body` {`boolean`} - syncBody\n\n  * `body-value` {`string`} - Only available if syncBody is true; this allows data binding to the value being worked on in hax-body tag\n\n  * `hide-message` {`boolean`} - Flag to hide the toast.\n\n  * `__imported` {`boolean`} - \n\nProperties:\n\n  * `offsetMargin` {`string`} - \n\n  * `allowedTags` {`any[]`} - allowed Tags, usually as dictated by the input filtering\nlayer of the backend system that HAX is riding on.\nWhile not fullproof, this at least will enforce front-end\nfiltering to match what actually is going to be allowed\nto be saved in the first place.\n\n  * `appStoreConnection` {`string`} - Connection object for talking to an app store.\n\n  * `__appStore` {`string`} - \n\n  * `redirectLocation` {`string`} - Optional URL to redirect to once we save.\n\n  * `redirectOnSave` {`boolean`} - Option to redirect once we save successfully\n\n  * `windowControllers` - \n\n  * `windowControllersReady` - \n\n  * `windowControllersLoaded` - \n\n  * `ready` {`boolean`} - \n\n  * `__lock` {`boolean`} - \n\n  * `endPoint` {`string`} - Location to save content to.\n\n  * `openDefault` {`boolean`} - Default the panel to open\n\n  * `hidePanelOps` {`boolean`} - Hide the panel operations (save and cancel),\n\n  * `elementAlign` {`string`} - Direction to elementAlign the hax edit panel\n\n  * `method` {`string`} - Method to save content.\n\n  * `syncBody` {`boolean`} - syncBody\n\n  * `bodyValue` {`string`} - Only available if syncBody is true; this allows data binding to the value being worked on in hax-body tag\n\n  * `hideMessage` {`boolean`} - Flag to hide the toast.\n\n  * `__imported` {`boolean`} - ",
      "attributes": [
        {
          "name": "offset-margin",
          "description": "`offset-margin` {`string`} - \n\nProperty: offsetMargin"
        },
        {
          "name": "allowed-tags",
          "description": "`allowed-tags` {`any[]`} - allowed Tags, usually as dictated by the input filtering\nlayer of the backend system that HAX is riding on.\nWhile not fullproof, this at least will enforce front-end\nfiltering to match what actually is going to be allowed\nto be saved in the first place.\n\nProperty: allowedTags"
        },
        {
          "name": "app-store-connection",
          "description": "`app-store-connection` {`string`} - Connection object for talking to an app store.\n\nProperty: appStoreConnection"
        },
        {
          "name": "__appStore",
          "description": "`__appStore` {`string`} - \n\nProperty: __appStore"
        },
        {
          "name": "redirect-location",
          "description": "`redirect-location` {`string`} - Optional URL to redirect to once we save.\n\nProperty: redirectLocation"
        },
        {
          "name": "redirect-on-save",
          "description": "`redirect-on-save` {`boolean`} - Option to redirect once we save successfully\n\nProperty: redirectOnSave",
          "valueSet": "v"
        },
        {
          "name": "ready",
          "description": "`ready` {`boolean`} - \n\nProperty: ready\n\nDefault: false",
          "valueSet": "v"
        },
        {
          "name": "end-point",
          "description": "`end-point` {`string`} - Location to save content to.\n\nProperty: endPoint\n\nDefault: null"
        },
        {
          "name": "open-default",
          "description": "`open-default` {`boolean`} - Default the panel to open\n\nProperty: openDefault\n\nDefault: false",
          "valueSet": "v"
        },
        {
          "name": "hide-panel-ops",
          "description": "`hide-panel-ops` {`boolean`} - Hide the panel operations (save and cancel),\n\nProperty: hidePanelOps\n\nDefault: false",
          "valueSet": "v"
        },
        {
          "name": "element-align",
          "description": "`element-align` {`string`} - Direction to elementAlign the hax edit panel\n\nProperty: elementAlign\n\nDefault: left"
        },
        {
          "name": "method",
          "description": "`method` {`string`} - Method to save content.\n\nProperty: method\n\nDefault: PUT"
        },
        {
          "name": "sync-body",
          "description": "`sync-body` {`boolean`} - syncBody\n\nProperty: syncBody\n\nDefault: false",
          "valueSet": "v"
        },
        {
          "name": "body-value",
          "description": "`body-value` {`string`} - Only available if syncBody is true; this allows data binding to the value being worked on in hax-body tag\n\nProperty: bodyValue\n\nDefault: "
        },
        {
          "name": "hide-message",
          "description": "`hide-message` {`boolean`} - Flag to hide the toast.\n\nProperty: hideMessage\n\nDefault: false",
          "valueSet": "v"
        },
        {
          "name": "__imported",
          "description": "`__imported` {`boolean`} - \n\nProperty: __imported\n\nDefault: false",
          "valueSet": "v"
        },
        {
          "name": "onhax-body-content-changed",
          "description": "`hax-body-content-changed` {`CustomEvent<any>`} - "
        },
        {
          "name": "onsimple-toast-show",
          "description": "`simple-toast-show` {`CustomEvent<{ text: string; duration: number; }>`} - "
        },
        {
          "name": "oncms-hax-saved",
          "description": "`cms-hax-saved` {`CustomEvent<boolean>`} - "
        }
      ]
    },
    {
      "name": "cms-block",
      "description": "`cms-block`\n\nAttributes:\n\n  * `loading` {`boolean`} - Loading state\n\n  * `block-module` {`string`} - Module supplying the block\n\n  * `block-delta` {`string`} - A delta value relative to the module\n\n  * `block-end-point` {`string`} - block end point updated, change the way we do processing.\n\n  * `body-data` - Body data which is just block with some encapsulation.\n\n  * `block-data` {`string`} - block data from the end point.\n\n  * `block-prefix` {`string`} - Prefix for the block to be processed\n\n  * `block-suffix` {`string`} - Suffix for the block to be processed\n\n  * `hax-edit-mode` {`boolean`} - \n\nProperties:\n\n  * `loading` {`boolean`} - Loading state\n\n  * `blockModule` {`string`} - Module supplying the block\n\n  * `blockDelta` {`string`} - A delta value relative to the module\n\n  * `blockEndPoint` {`string`} - block end point updated, change the way we do processing.\n\n  * `bodyData` - Body data which is just block with some encapsulation.\n\n  * `blockData` {`string`} - block data from the end point.\n\n  * `blockPrefix` {`string`} - Prefix for the block to be processed\n\n  * `blockSuffix` {`string`} - Suffix for the block to be processed\n\n  * `haxEditMode` {`boolean`} - \n\n  * `_template` {`HTMLTemplateElement | null`} - \n\n  * `_importPath` {`string`} - \n\n  * `rootPath` {`string`} - \n\n  * `importPath` {`string`} - \n\n  * `root` {`HTMLElement | ShadowRoot | StampedTemplate | null`} - \n\n  * `$` - \n\n  * `_overrideLegacyUndefined` {`boolean`} - \n\n  * `PROPERTY_EFFECT_TYPES` - ",
      "attributes": [
        {
          "name": "loading",
          "description": "`loading` {`boolean`} - Loading state\n\nProperty: loading\n\nDefault: false",
          "valueSet": "v"
        },
        {
          "name": "block-module",
          "description": "`block-module` {`string`} - Module supplying the block\n\nProperty: blockModule"
        },
        {
          "name": "block-delta",
          "description": "`block-delta` {`string`} - A delta value relative to the module\n\nProperty: blockDelta"
        },
        {
          "name": "block-end-point",
          "description": "`block-end-point` {`string`} - block end point updated, change the way we do processing.\n\nProperty: blockEndPoint"
        },
        {
          "name": "body-data",
          "description": "`body-data` - Body data which is just block with some encapsulation.\n\nProperty: bodyData"
        },
        {
          "name": "block-data",
          "description": "`block-data` {`string`} - block data from the end point.\n\nProperty: blockData"
        },
        {
          "name": "block-prefix",
          "description": "`block-prefix` {`string`} - Prefix for the block to be processed\n\nProperty: blockPrefix"
        },
        {
          "name": "block-suffix",
          "description": "`block-suffix` {`string`} - Suffix for the block to be processed\n\nProperty: blockSuffix"
        },
        {
          "name": "hax-edit-mode",
          "description": "`hax-edit-mode` {`boolean`} - \n\nProperty: haxEditMode\n\nDefault: false",
          "valueSet": "v"
        }
      ]
    },
    {
      "name": "cms-entity",
      "description": "`cms-entity`\n\nAttributes:\n\n  * `loading` {`boolean`} - Loading state\n\n  * `entity-type` {`string`} - Type of entity to load\n\n  * `entity-id` {`string`} - ID of the item to load\n\n  * `entity-display-mode` {`string`} - Display mode of the entity\n\n  * `entity-end-point` {`string`} - entity end point updated, change the way we do processing.\n\n  * `body-data` - Body data which is just entity with some encapsulation.\n\n  * `entity-data` {`string`} - entity data from the end point.\n\n  * `entity-prefix` {`string`} - Prefix for the entity to be processed\n\n  * `entity-suffix` {`string`} - Suffix for the entity to be processed\n\n  * `hax-edit-mode` {`boolean`} - \n\nProperties:\n\n  * `loading` {`boolean`} - Loading state\n\n  * `entityType` {`string`} - Type of entity to load\n\n  * `entityId` {`string`} - ID of the item to load\n\n  * `entityDisplayMode` {`string`} - Display mode of the entity\n\n  * `entityEndPoint` {`string`} - entity end point updated, change the way we do processing.\n\n  * `bodyData` - Body data which is just entity with some encapsulation.\n\n  * `entityData` {`string`} - entity data from the end point.\n\n  * `entityPrefix` {`string`} - Prefix for the entity to be processed\n\n  * `entitySuffix` {`string`} - Suffix for the entity to be processed\n\n  * `haxEditMode` {`boolean`} - \n\n  * `_template` {`HTMLTemplateElement | null`} - \n\n  * `_importPath` {`string`} - \n\n  * `rootPath` {`string`} - \n\n  * `importPath` {`string`} - \n\n  * `root` {`HTMLElement | ShadowRoot | StampedTemplate | null`} - \n\n  * `$` - \n\n  * `_overrideLegacyUndefined` {`boolean`} - \n\n  * `PROPERTY_EFFECT_TYPES` - ",
      "attributes": [
        {
          "name": "loading",
          "description": "`loading` {`boolean`} - Loading state\n\nProperty: loading\n\nDefault: false",
          "valueSet": "v"
        },
        {
          "name": "entity-type",
          "description": "`entity-type` {`string`} - Type of entity to load\n\nProperty: entityType"
        },
        {
          "name": "entity-id",
          "description": "`entity-id` {`string`} - ID of the item to load\n\nProperty: entityId"
        },
        {
          "name": "entity-display-mode",
          "description": "`entity-display-mode` {`string`} - Display mode of the entity\n\nProperty: entityDisplayMode"
        },
        {
          "name": "entity-end-point",
          "description": "`entity-end-point` {`string`} - entity end point updated, change the way we do processing.\n\nProperty: entityEndPoint"
        },
        {
          "name": "body-data",
          "description": "`body-data` - Body data which is just entity with some encapsulation.\n\nProperty: bodyData"
        },
        {
          "name": "entity-data",
          "description": "`entity-data` {`string`} - entity data from the end point.\n\nProperty: entityData"
        },
        {
          "name": "entity-prefix",
          "description": "`entity-prefix` {`string`} - Prefix for the entity to be processed\n\nProperty: entityPrefix"
        },
        {
          "name": "entity-suffix",
          "description": "`entity-suffix` {`string`} - Suffix for the entity to be processed\n\nProperty: entitySuffix"
        },
        {
          "name": "hax-edit-mode",
          "description": "`hax-edit-mode` {`boolean`} - \n\nProperty: haxEditMode\n\nDefault: false",
          "valueSet": "v"
        }
      ]
    },
    {
      "name": "cms-token",
      "description": "`cms-token`\nRender and process a shortcode / token from a content management system.\n\nAttributes:\n\n  * `loading` {`boolean`} - Loading state\n\n  * `token` {`string`} - Token changed (somehow) do the token processing.\n\n  * `token-end-point` {`string`} - Token end point updated, change the way we do processing.\n\n  * `body-data` - Body data which is just token with some encapsulation.\n\n  * `_click-invoked` {`string`} - internal tracking for edit button being clicked in HAX presentation\n\n  * `token-data` {`string`} - Token data from the end point.\n\n  * `token-prefix` {`string`} - Prefix for the token to be processed\n\n  * `token-suffix` {`string`} - Suffix for the token to be processed\n\n  * `_display-mode` {`string`} - \n\n  * `hax-edit-mode` {`boolean`} - \n\nProperties:\n\n  * `loading` {`boolean`} - Loading state\n\n  * `token` {`string`} - Token changed (somehow) do the token processing.\n\n  * `tokenEndPoint` {`string`} - Token end point updated, change the way we do processing.\n\n  * `bodyData` - Body data which is just token with some encapsulation.\n\n  * `_clickInvoked` {`string`} - internal tracking for edit button being clicked in HAX presentation\n\n  * `tokenData` {`string`} - Token data from the end point.\n\n  * `tokenPrefix` {`string`} - Prefix for the token to be processed\n\n  * `tokenSuffix` {`string`} - Suffix for the token to be processed\n\n  * `_displayMode` {`string`} - \n\n  * `haxEditMode` {`boolean`} - \n\n  * `windowControllers` - \n\n  * `_template` {`HTMLTemplateElement | null`} - \n\n  * `_importPath` {`string`} - \n\n  * `rootPath` {`string`} - \n\n  * `importPath` {`string`} - \n\n  * `root` {`HTMLElement | ShadowRoot | StampedTemplate | null`} - \n\n  * `$` - \n\n  * `_overrideLegacyUndefined` {`boolean`} - \n\n  * `PROPERTY_EFFECT_TYPES` - ",
      "attributes": [
        {
          "name": "loading",
          "description": "`loading` {`boolean`} - Loading state\n\nProperty: loading\n\nDefault: false",
          "valueSet": "v"
        },
        {
          "name": "token",
          "description": "`token` {`string`} - Token changed (somehow) do the token processing.\n\nProperty: token"
        },
        {
          "name": "token-end-point",
          "description": "`token-end-point` {`string`} - Token end point updated, change the way we do processing.\n\nProperty: tokenEndPoint"
        },
        {
          "name": "body-data",
          "description": "`body-data` - Body data which is just token with some encapsulation.\n\nProperty: bodyData"
        },
        {
          "name": "_click-invoked",
          "description": "`_click-invoked` {`string`} - internal tracking for edit button being clicked in HAX presentation\n\nProperty: _clickInvoked\n\nDefault: false"
        },
        {
          "name": "token-data",
          "description": "`token-data` {`string`} - Token data from the end point.\n\nProperty: tokenData"
        },
        {
          "name": "token-prefix",
          "description": "`token-prefix` {`string`} - Prefix for the token to be processed\n\nProperty: tokenPrefix\n\nDefault: ["
        },
        {
          "name": "token-suffix",
          "description": "`token-suffix` {`string`} - Suffix for the token to be processed\n\nProperty: tokenSuffix\n\nDefault: ]"
        },
        {
          "name": "_display-mode",
          "description": "`_display-mode` {`string`} - \n\nProperty: _displayMode\n\nDefault: full"
        },
        {
          "name": "hax-edit-mode",
          "description": "`hax-edit-mode` {`boolean`} - \n\nProperty: haxEditMode\n\nDefault: false",
          "valueSet": "v"
        }
      ]
    },
    {
      "name": "cms-views",
      "description": "`cms-views`\n\nAttributes:\n\n  * `loading` {`boolean`} - Loading state\n\n  * `views-name` {`string`} - Name of the views to render\n\n  * `views-display` {`string`} - Display from the views\n\n  * `views-end-point` {`string`} - views end point updated, change the way we do processing.\n\n  * `body-data` - Body data which is just views with some encapsulation.\n\n  * `views-data` {`string`} - views data from the end point.\n\n  * `views-prefix` {`string`} - Prefix for the views to be processed\n\n  * `views-suffix` {`string`} - Suffix for the views to be processed\n\n  * `hax-edit-mode` {`boolean`} - \n\nProperties:\n\n  * `loading` {`boolean`} - Loading state\n\n  * `viewsName` {`string`} - Name of the views to render\n\n  * `viewsDisplay` {`string`} - Display from the views\n\n  * `viewsEndPoint` {`string`} - views end point updated, change the way we do processing.\n\n  * `bodyData` - Body data which is just views with some encapsulation.\n\n  * `viewsData` {`string`} - views data from the end point.\n\n  * `viewsPrefix` {`string`} - Prefix for the views to be processed\n\n  * `viewsSuffix` {`string`} - Suffix for the views to be processed\n\n  * `haxEditMode` {`boolean`} - \n\n  * `_template` {`HTMLTemplateElement | null`} - \n\n  * `_importPath` {`string`} - \n\n  * `rootPath` {`string`} - \n\n  * `importPath` {`string`} - \n\n  * `root` {`HTMLElement | ShadowRoot | StampedTemplate | null`} - \n\n  * `$` - \n\n  * `_overrideLegacyUndefined` {`boolean`} - \n\n  * `PROPERTY_EFFECT_TYPES` - ",
      "attributes": [
        {
          "name": "loading",
          "description": "`loading` {`boolean`} - Loading state\n\nProperty: loading\n\nDefault: false",
          "valueSet": "v"
        },
        {
          "name": "views-name",
          "description": "`views-name` {`string`} - Name of the views to render\n\nProperty: viewsName"
        },
        {
          "name": "views-display",
          "description": "`views-display` {`string`} - Display from the views\n\nProperty: viewsDisplay"
        },
        {
          "name": "views-end-point",
          "description": "`views-end-point` {`string`} - views end point updated, change the way we do processing.\n\nProperty: viewsEndPoint"
        },
        {
          "name": "body-data",
          "description": "`body-data` - Body data which is just views with some encapsulation.\n\nProperty: bodyData"
        },
        {
          "name": "views-data",
          "description": "`views-data` {`string`} - views data from the end point.\n\nProperty: viewsData"
        },
        {
          "name": "views-prefix",
          "description": "`views-prefix` {`string`} - Prefix for the views to be processed\n\nProperty: viewsPrefix"
        },
        {
          "name": "views-suffix",
          "description": "`views-suffix` {`string`} - Suffix for the views to be processed\n\nProperty: viewsSuffix"
        },
        {
          "name": "hax-edit-mode",
          "description": "`hax-edit-mode` {`boolean`} - \n\nProperty: haxEditMode\n\nDefault: false",
          "valueSet": "v"
        }
      ]
    }
  ],
  "globalAttributes": [],
  "valueSets": []
}