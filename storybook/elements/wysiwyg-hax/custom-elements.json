{
  "version": 1,
  "tags": [
    {
      "name": "wysiwyg-hax",
      "description": "`wysiwyg-hax`\n`Integration of wysiwyg edit form for a page with HAX.`\n\nEvents:\n\n  * `hax-save` {`CustomEvent<any>`} - \n\n  * `simple-modal-hide` {`CustomEvent<{}>`} - \n\nAttributes:\n\n  * `hide-panel-ops` {`boolean`} - Hide the panel operations (save and cancel),\n\n  * `offset-margin` {`string`} - \n\n  * `body-value` {`string`} - Data binding of a hidden text area with the value from the hax-body tag\n\n  * `app-store-connection` {`string`} - Connection object for talking to an app store.\n\n  * `saveButtonSelector` - Object reference that will get clicked on\n\n  * `field-class` {`string`} - class on the field\n\n  * `sync-body` {`boolean`} - \n\n  * `open-default` {`boolean`} - Default the panel to open\n\n  * `element-align` {`string`} - Direction to align the hax edit panel\n\n  * `field-id` {`string`} - fieldId, id value on the input field.\n\n  * `field-name` {`string`} - fieldName, internal to the form in whatever system it's in.\n\n  * `end-point` {`string`} - Location to save content to.\n\n  * `allowed-tags` {`any[]`} - allowed Tags, usually as dictated by the input filtering\nlayer of the backend system that HAX is riding on.\nWhile not fullproof, this at least will enforce front-end\nfiltering to match what actually is going to be allowed\nto be saved in the first place.\n\n  * `redirect-location` {`string`} - \n\n  * `update-page-data` {`string`} - Page data, body of text as a string.\n\nProperties:\n\n  * `hidePanelOps` {`boolean`} - Hide the panel operations (save and cancel),\n\n  * `offsetMargin` {`string`} - \n\n  * `bodyValue` {`string`} - Data binding of a hidden text area with the value from the hax-body tag\n\n  * `appStoreConnection` {`string`} - Connection object for talking to an app store.\n\n  * `saveButtonSelector` - Object reference that will get clicked on\n\n  * `fieldClass` {`string`} - class on the field\n\n  * `syncBody` {`boolean`} - \n\n  * `windowControllers` - \n\n  * `openDefault` {`boolean`} - Default the panel to open\n\n  * `elementAlign` {`string`} - Direction to align the hax edit panel\n\n  * `fieldId` {`string`} - fieldId, id value on the input field.\n\n  * `fieldName` {`string`} - fieldName, internal to the form in whatever system it's in.\n\n  * `endPoint` {`string`} - Location to save content to.\n\n  * `allowedTags` {`any[]`} - allowed Tags, usually as dictated by the input filtering\nlayer of the backend system that HAX is riding on.\nWhile not fullproof, this at least will enforce front-end\nfiltering to match what actually is going to be allowed\nto be saved in the first place.\n\n  * `redirectLocation` {`string`} - \n\n  * `updatePageData` {`string`} - Page data, body of text as a string.",
      "attributes": [
        {
          "name": "hide-panel-ops",
          "description": "`hide-panel-ops` {`boolean`} - Hide the panel operations (save and cancel),\n\nProperty: hidePanelOps",
          "valueSet": "v"
        },
        {
          "name": "offset-margin",
          "description": "`offset-margin` {`string`} - \n\nProperty: offsetMargin"
        },
        {
          "name": "body-value",
          "description": "`body-value` {`string`} - Data binding of a hidden text area with the value from the hax-body tag\n\nProperty: bodyValue"
        },
        {
          "name": "app-store-connection",
          "description": "`app-store-connection` {`string`} - Connection object for talking to an app store.\n\nProperty: appStoreConnection"
        },
        {
          "name": "saveButtonSelector",
          "description": "`saveButtonSelector` - Object reference that will get clicked on\n\nProperty: saveButtonSelector"
        },
        {
          "name": "field-class",
          "description": "`field-class` {`string`} - class on the field\n\nProperty: fieldClass"
        },
        {
          "name": "sync-body",
          "description": "`sync-body` {`boolean`} - \n\nProperty: syncBody",
          "valueSet": "v"
        },
        {
          "name": "open-default",
          "description": "`open-default` {`boolean`} - Default the panel to open\n\nProperty: openDefault\n\nDefault: false",
          "valueSet": "v"
        },
        {
          "name": "element-align",
          "description": "`element-align` {`string`} - Direction to align the hax edit panel\n\nProperty: elementAlign\n\nDefault: left"
        },
        {
          "name": "field-id",
          "description": "`field-id` {`string`} - fieldId, id value on the input field.\n\nProperty: fieldId\n\nDefault: textarea-input-field"
        },
        {
          "name": "field-name",
          "description": "`field-name` {`string`} - fieldName, internal to the form in whatever system it's in.\n\nProperty: fieldName\n\nDefault: data[content]"
        },
        {
          "name": "end-point",
          "description": "`end-point` {`string`} - Location to save content to.\n\nProperty: endPoint\n\nDefault: null"
        },
        {
          "name": "allowed-tags",
          "description": "`allowed-tags` {`any[]`} - allowed Tags, usually as dictated by the input filtering\nlayer of the backend system that HAX is riding on.\nWhile not fullproof, this at least will enforce front-end\nfiltering to match what actually is going to be allowed\nto be saved in the first place.\n\nProperty: allowedTags\n\nDefault: "
        },
        {
          "name": "redirect-location",
          "description": "`redirect-location` {`string`} - \n\nProperty: redirectLocation\n\nDefault: "
        },
        {
          "name": "update-page-data",
          "description": "`update-page-data` {`string`} - Page data, body of text as a string.\n\nProperty: updatePageData\n\nDefault: "
        },
        {
          "name": "onhax-save",
          "description": "`hax-save` {`CustomEvent<any>`} - "
        },
        {
          "name": "onsimple-modal-hide",
          "description": "`simple-modal-hide` {`CustomEvent<{}>`} - "
        }
      ]
    }
  ],
  "globalAttributes": [],
  "valueSets": []
}